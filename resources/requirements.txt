Your task is to implement a social networking system. The application consists of client and server parts. You can use the previous project as the base for this project.


Basic requirements (1-3):
- In this application the server should be able to support multiple simultaneous clients
- New users should be able to register to the system with user name and password
- Registered user should be able to log in to the system
After logging in user can:
- Update own status by sending message to the server. Server saves the timestamp of the status update.
- Get the list of all registered users
- Start "following" a specific user by selecting the user from the list of registered users
- Get the feed of all followed users (including the user itself) and their status messages. A single entity of feed consists of timestamp (when server received this update) user name (who posted that status), status update (the message itself) and the number of "likes" related to that status update. For example:
    <timestamp> Alice: "I love programming!" 0 likes
- "Like" a selected status update.A specific user may like a specific status only once (Meaning that if Alice already likes Bob's status, the number of likes should not increase if Alice tries to like the same status again)
- User also can share content. The user's share page should be available without logging in to the system.
Log out

The client should display the menu of all the available actions that the user can make. When choosing an action, client should send a corresponding message to the server, which then replies with a proper message...
Note that the server responsible for maintaining all the main logic of the application and holding the data (registered users, list of their followers, status updates and the number of "likes" related to the status updates, ...). You store this data at run time to different data structures (Lists, Sets, Maps, etc...) of your choice. When the server is terminated all the data is naturally lost if you don't store it to the disk. So, if you only store the data during run-time, you will get the maximum of 3.


Advanced requirement (grades 1-4)
After logging in, user can also:
- get the list of persons she is currently following
- stop following selected user she is following at the moment
- stop "liking" of the status update that she is currently liking

Server serializes all the data to the disk when the server quits.When restarted, server de-serializes all the data from the disk


More advanced requirement (grades 1-5):
You use the model-view-controller design pattern and document the usage of this pattern to the project report (see the chapter "Project Report"). Note that there is no single way to apply this pattern, but somehow you should divide the tasks to model, view and controller objects. Note that "view" in our case is just the command line unless you really want to implement a GUI (implementing GUI is not required in order to get 5.For example controller can update the view (command line) and handle the networking (reading and writing from/to sockets) Model takes care of the data handling (storing to memory and serialization/deserialization. Document how you implemented this pattern in your application


An example of usage when I start the application:
1.      I first start the server application and then the client application
2.      I register myself by sending server with a desired username (Bob) and password (the server should reply if my registration was successful (there are no registered users with a same)
3.      After registering, I can log in by typing my nickname and password (server replies, if the login was successful or not)
4.      After a successful logging in, I can update my status by sending a corresponding message to the server, I send "Another social media application wtf?" (Server saves the message and the time when it received the message)
--- at this point, I register and log in another user, Alice, to the system with a similar routine above --
 5.      Bob  wants to see the list of all the other registered users (Bob can now see that Alice has registered)
6.      Bob selects one of the users that he wants to follow (Alice). The server now associates Bob with Alice, so that Bob can see her status updates.
--- at this point, Alice updates her status ---
 7.      Bob wants to get the feed. The feed shows all the status updates of all users that Bob is following, including Bob's own status update.  Bob gets the list of status updates in chronological order (Alice's status at the top because she made it after Bob) The feed looks maybe something like this:
<timestamp> Alice: "I love programming!"  0 likes
<timestamp> Bob: "Another social media application???" 0 likes
 8.      Bob wants to "like" Alice's status (Server gets Bob's like request and associates it with Alice's status message, now when Alice requests the feed, she sees that Bob likes her status)
9.      Bob postOlds a new status update "Actually this rocks! "
10.  Bob gets the feed again which looks something like this:
<timestamp> Bob "Actually this rocks!" 0 likes
<timestamp> Alice: "I love programming!"  1 likes
<timestamp> Bob: "Another social media application?" 0 likes
11.  Bob logs out, Alice logs out, the server is terminated
Before you start implementing...



Do some planning first!
- Think about what messages you need to send
        from client to server (registration, logging in, status update, see registered users, see feed, ...)
        from server to client (registration ok, registration not ok, list of registered users, feed, ...)
        Perhaps outline these messages to the paper first?
- How server reacts to different messages? What if user makes illegal selection?
- Think about the data structures, what kind of collections (Maps, Sets, ...) you need to store the data?
- Think of the design patterns that would be appropriate to use in this project. You should apply at least one design pattern as a part of your solution
- Think about responsibilities of each object! Object(s) for handling reading and writing to socket, object(s) handling the data storing/retrieving, object for updating the view, etc.


Additional notes
You need to implement both a client and a server sides for the application using Java and the techniques learned during the course. We are not using databases, web services or other technologies that would require additional installation before launching the application on assistant's machine. If you still insist to use some other technologies, you must ask permission from the course assistant!
Otherwise the choice of other implementation details of the server is up to you
GUI is not required but you can implement one if you want (for example with Swing by using WindowBuilder (see the previous work's description)
